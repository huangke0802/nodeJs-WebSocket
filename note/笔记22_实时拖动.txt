1.user.proto
package protobuf;
message User {
  required int32 uid = 1;
  required string uname = 2;
  required string pwd = 3;
}
message MoveMsg {
  required int32 typeid = 1[default=0];
  required int32 divid = 2;
  required int32 x = 3;
  required int32 y = 4;
}

2.SocketIoServer.js
var app = require('express')();  
var http = require('http').Server(app);  
var io = require('socket.io')(http);
var  fs=  require('fs'); 
var ProtoBuf = require("protobufjs"); 
var MoveMsg = require('./userproto.js')['protobuf']['MoveMsg'];

//----------------httpServer设置-------------------------------
app.get('/', function(req, res){  
    function recall(data){  
            res.send(data.toString());  
        }  
        fs.readFile('./socketIoClient.html', function(err,  data)  {  
            if  (err)  {  
              console.log("bbbbb:"+err);  
              recall('文件不存在');  
            }else{  
              //console.log(data.toString());  
              recall(data);  
            }  
        });  
    //res.send('<h1>Welcome Realtime Server</h1>');  
});
app.get('/js/socket.io.js',function(req,res){  
    function recall(data){  
            res.send(data.toString());  
        }  
        fs.readFile('./js/socket.io.js', function(err,  data)  {  
            if  (err)  {  
              recall('文件不存在');  
            }else{  
              //console.log(data.toString());  
              recall(data);  
            }  
        });  
});  
//-------------------WebSocket设置----------------------
//在线用户  
var onlineUsers = {};  
var ii=0;
io.on('connection', function(socket){ 
    console.log('有人连上来了');
    //监听新用户加入  
    //socket.on('login', function(obj){ 
    socket.name=++ii;
    onlineUsers[socket.name]=socket;
    var moveMsg = new MoveMsg();
    moveMsg.typeid=1;
    moveMsg.divid=socket.name;
    moveMsg.x=0;
    moveMsg.y=0;
    var buffer = moveMsg.encode().toBuffer();
    socket.send(buffer);
    //});
     //监听用户退出  
    socket.on('disconnect', function(){  
        console.log('有人退出'); 
        delete onlineUsers[socket.name];
    });
    //监听用户发布聊天内容  
    socket.on('message', function(msg){
        //console.log(socket.name+'说：'+msg); 
        //socket.send(socket.name+'说：'+msg);
        //var userbuf = User.decode(msg);
        //console.log(userbuf.uname);
        sayall(msg,socket);
    }); 
});
function sayall(msg,socket){
    for(var key in onlineUsers){
        if(onlineUsers[key]!=socket){
            onlineUsers[key].send(msg);
        }
    }
}
http.listen(9000, function(){  
    console.log('listening on *:9000');  
});  

3.socketIoClient.js
<html>  
<head>  
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />  
    <style>
    div{
        position:absolute;
        width:100px;
        height:100px;
    }
  </style>
    <!-- <script src="./js/jquery-1.3.1.min.js"></script> -->  
    <script src="/js/socket.io.js"></script>
    <script src="/js/long.min.js"></script> 
    <script src="/js/bytebuffer.min.js"></script> 
    <script src="/js/protobuf.min.js"></script>
    <script>
    if (typeof dcodeIO === 'undefined' || !dcodeIO.ProtoBuf) {
        alert('出错');
    }
    // 创建ProtoBuf
    var ProtoBuf = dcodeIO.ProtoBuf;
    var MoveMsg = ProtoBuf.loadProtoFile("/js/user.proto").build('protobuf.MoveMsg');
    var mMsg=new MoveMsg();
    var iosocket = null;
    window.onload=function(){
        iosocket = io.connect('http://localhost:9000/'); 
        iosocket.on('connect', function () { 
         alert('连接成功');
        });
        iosocket.on('message', function(message) { 
        var moveMsg = MoveMsg.decode(message);
        var typeid=moveMsg.typeid;
        var divid= 'd'+moveMsg.divid;
        var movediv = document.getElementById(divid);
        if(typeid==0){ //表示移动div
           movediv.style.left=moveMsg.x+'px';
           movediv.style.top = moveMsg.y+'px';
        }else if(typeid==1){//表示指明可移动的div
           DivMove.apply(movediv);
           mMsg.typeid=0;
           mMsg.divid=moveMsg.divid;
        }
             });  
         iosocket.on('disconnect', function() {  
                    alert('服务端关闭');  
             });  
     }
     function DivMove(){
        var flag=false;
        var dx=0;
        var dy=0;
        this.onmousedown=function(){
            var e = event||window.event;
            dx = e.x-parseInt(this.style.left);
            dy = e.y-parseInt(this.style.top);
            this.flag=true;
        }
        var thisa=this;
        document.onmousemove=function(){
            if(thisa.flag){
                var e = event||window.event;
                var xx = e.x-dx;
                var yy = e.y-dy;
                thisa.style.left=xx+'px';
                thisa.style.top=yy+'px';
                
                mMsg.x=xx;
                mMsg.y=yy;
                var buffer = mMsg.encode().toBuffer();
                iosocket.send(buffer);
            }
        }
        this.onmouseup=function(){
            this.flag=false
        }
     }
    </script>
</head>
<body>
    <div id="d1" style='background:red;left:100px;top:100px'></div>
    <div id="d2" style='background:green;left:200px;top:200px'></div>
    <div id="d3" style='background:blue;left:300px;top:300px'></div>
</body>
</html>
